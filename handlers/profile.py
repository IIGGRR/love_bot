
from aiogram import F, Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from love_bot.keyboard.inline.profile import add_partner_keyboard, choice_add_partner_keyboard, returning_main_profile_keyboard, delete_partner_keyboard, confirm_delete_partner_keyboard

from love_bot.database.requests.user import get_user_by_tg_id, delete_partner, get_tg_id_partner
from aiogram.utils.deep_linking import create_start_link
from aiogram.fsm.state import State, StatesGroup


router = Router(name=__name__)


@router.message(F.text.startswith('–ü—Ä–æ—Ñ–∏–ª—å'))
async def main_profile_handler(message: Message, bot: Bot, state: FSMContext):
    await state.clear()
    tg_id = message.from_user.id
    user = await get_user_by_tg_id(tg_id)
    partner = await get_user_by_tg_id(user.tg_fr_id)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    if partner is not None:
        await message.answer(
            text=f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ \n'
                f'üìä–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \n\n'
                f'üÖ∞Ô∏è–ò–º—è: {user.name} \n'
                f'‚ù§Ô∏è–í–∞—à–∞ –ø–æ–ª–æ–≤–∏–Ω–∫–∞: {partner.name} \n'
                f'üìÜ–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: {user.reg_date.strftime("%Y-%m-%d %H:%M")} \n'
                f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ',
                             parse_mode='HTML', reply_markup=delete_partner_keyboard)
    else:
        await message.answer(
            text=f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ \n'
                 f'üìä–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \n\n'
                 f'üÖ∞Ô∏è–ò–º—è: {user.name} \n'
                 f'üìÜ–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: {user.reg_date.strftime("%Y-%m-%d %H:%M")} \n'
                 f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ \n\n'
                 f''
                 f'<b>–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–ª–æ–≤–∏–Ω–∫–∏\n '
                 f'–°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–∏—Ç—åüôä‚¨áÔ∏è</b>',
            parse_mode='HTML', reply_markup=add_partner_keyboard)


@router.callback_query(F.data == 'add_partner')
async def add_partner_handler(call: CallbackQuery, bot: Bot, state: FSMContext):

    await bot.edit_message_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:', reply_markup=choice_add_partner_keyboard,
                                chat_id=call.message.chat.id, message_id=call.message.message_id)


@router.callback_query(F.data == 'add_partner link')
async def add_partner_link_handler(call: CallbackQuery, bot: Bot, state: FSMContext):
    tg_id = call.from_user.id
    link = await create_start_link(payload=str(tg_id), encode=True, bot=bot)
    await bot.edit_message_text(f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ {link}"
                                f"\n –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ —Å–≤–æ–µ–π –ø–æ–ª–æ–≤–∏–Ω–∫–µ‚ù§Ô∏è",
                                chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=returning_main_profile_keyboard)


@router.callback_query(F.data.startswith('main_profile'))
async def returning_main_profile_handler(call: CallbackQuery, bot: Bot, state: FSMContext):
    tg_id = call.from_user.id
    user = await get_user_by_tg_id(tg_id)
    partner = await get_user_by_tg_id(user.tg_fr_id)
    if partner is not None:
        await bot.edit_message_text(
            text=f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ \n'
                f'üìä–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \n\n'
                f'üÖ∞Ô∏è–ò–º—è: {user.name} \n'
                f'‚ù§Ô∏è–í–∞—à–∞ –ø–æ–ª–æ–≤–∏–Ω–∫–∞: {partner.name} \n'
                f'üìÜ–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: {user.reg_date.strftime("%Y-%m-%d %H:%M")} \n'
                f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ',
                             parse_mode='HTML', reply_markup=delete_partner_keyboard,
                             chat_id=call.message.chat.id, message_id=call.message.message_id)
    else:
        await bot.edit_message_text(
            text=f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ \n'
                 f'üìä–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \n\n'
                 f'üÖ∞Ô∏è–ò–º—è: {user.name} \n'
                 f'üìÜ–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: {user.reg_date.strftime("%Y-%m-%d %H:%M")} \n'
                 f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ \n\n'
                 f''
                 f'<b>–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–ª–æ–≤–∏–Ω–∫–∏\n '
                 f'–°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–∏—Ç—åüôä‚¨áÔ∏è</b>',
            parse_mode='HTML', reply_markup=add_partner_keyboard,
                             chat_id=call.message.chat.id, message_id=call.message.message_id)


@router.callback_query(F.data.startswith('delete_partner'))
async def start_delete_partner_handler(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.edit_message_text(text='–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=confirm_delete_partner_keyboard,
                                chat_id=call.message.chat.id, message_id=call.message.message_id)


@router.callback_query(F.data.startswith('confirm delete_partner'))
async def delete_partner_handler(call: CallbackQuery, bot: Bot, state: FSMContext):
    tg_id = call.from_user.id
    partner_tg_id = await get_tg_id_partner(tg_id)
    await delete_partner(tg_id)
    user = await get_user_by_tg_id(tg_id)
    await bot.edit_message_text(text='–ü–∞—Ä—Ç–Ω–µ—Ä —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ‚úÖ', reply_markup=returning_main_profile_keyboard,
                                chat_id=call.message.chat.id, message_id=call.message.message_id)
    await bot.send_message(chat_id=partner_tg_id, text=f'{user.name} —É–¥–∞–ª–∏–ª –ø–æ–ª–æ–≤–∏–Ω–∫—Éüò≠üíî')

